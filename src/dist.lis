dist.asm:
     1                          ;	TITLE	BBCDIST.Z80 (C) R.T.RUSSELL 1982-2024
     2                          ;
     3                          ;BBC BASIC (Z80) - CP/M VERSION 2.20 & 3.00
     4                          ;(C) COPYRIGHT R.T.RUSSELL, 1982-2024.
     5                          ;ALL RIGHTS RESERVED.
     6                          ;
     7                          ;THIS PROGRAM ALLOWS THE USER TO ADAPT BBC BASIC TO THE
     8                          ;PARTICULAR CHARACTERISTICS OF HIS SYSTEM HARDWARE ETC.
     9                          ;
    10                          ;THE PROGRAM RESIDES AT 100H FOR EASE OF LOADING.
    11                          ;*** IT MUST NOT EXCEED 256 BYTES IN TOTAL LENGTH ***
    12                          ;
    13                          ;PLEASE NOTE THAT A Z80 PROCESSOR & CP/M VERSION 2.2
    14                          ;OR LATER ARE REQUIRED.
    15                          ;
    16                          ;R.T.RUSSELL, 11-03-1984, 03-05-1989, 12-05-2024
    17                          ;
    18                          CPM	EQU	5
    19                          COLD	EQU	200H
    20                          ;
    21                          	PUBLIC	CLRSCN
    22                          	PUBLIC	PUTCSR
    23                          	PUBLIC	GETCSR
    24                          	PUBLIC	PUTIME
    25                          	PUBLIC	GETIME
    26                          	PUBLIC	GETKEY
    27                          	PUBLIC	BYE
    28                          ;
    29                          ;	ASEG
    30                          	ORG	100H
    31                          ;
    32                          ;JUMP TABLE - BASIC makes calls to hardware-dependent
    33                          ;features via this table:
    34                          ;
    35  0000  c32400            	JP	INIT
    36  0003  c3c700            CLRSCN:	JP	CLS		;CLEAR SCREEN
    37  0006  c3c800            PUTCSR:	JP	PCSR		;SET CURSOR POSN.
    38  0009  c3c900            GETCSR:	JP	GCSR		;READ CURSOR POSN.
    39  000c  c36800            PUTIME:	JP	PTIME		;SET ELAPSED TIME
    40  000f  c35500            GETIME:	JP	GTIME		;READ ELAPSED TIME
    41  0012  c3a700            GETKEY:	JP	INKEY		;READ KEY (TIME LIMIT)
    42  0015  c35400            BYE:	JP	REBOOT		;RETURN TO CP/M
    43                          ;
    44                          ;BDOS	- Save the IX & IY registers & before performing a
    45                          ;	  CP/M function call.
    46                          ;
    47  0018  dde5              BDOS:	PUSH	IX
    48  001a  fde5              	PUSH	IY
    49  001c  cd0500            	CALL	CPM
    50  001f  fde1              	POP	IY
    51  0021  dde1              	POP	IX
    52  0023  c9                	RET
    53                          ;
    54                          ;INIT	- Perform hardware initialisation (if any).
    55                          ;
    56  0024  3e02              INIT:	LD	A,2
    57  0026  3c                	INC	A
    58  0027  113f00            	LD	DE,NOTZ80
    59  002a  ea3900            	JP	PE,FAIL
    60  002d  0e0c              	LD	C,12
    61  002f  cd1800            	CALL	BDOS
    62  0032  b7                	OR	A
    63  0033  114900            	LD	DE,NOTV2
    64  0036  c20002            	JP	NZ,COLD
    65  0039  0e09              FAIL:	LD	C,9
    66  003b  cd1800            	CALL	BDOS
    67  003e  c7                	RST	0
    68                          ;
    69  003f  4e6f742061205a38  NOTZ80:	DEFB	"Not a Z80$"
              3024              
    70  0049  4e6f742043502f4d  NOTV2:	DEFB	"Not CP/M 2$"
              203224            
    71                          ;
    72                          ;REBOOT	- Switch off interrupts & return to CP/M
    73                          ;
    74  0054  c7                REBOOT:	RST	0
    75                          ;
    76                          ;GTIME	- Read elapsed-time clock.
    77                          ;  	  Outputs: DEHL = elapsed time (centiseconds)
    78                          ; 	  Destroys: A,D,E,H,L,F
    79                          ;
    80  0055  c5                GTIME:	PUSH	BC
    81  0056  cd8100            	CALL	TICKS
    82  0059  ed4bdd00          	LD	BC,(OFFLO)
    83  005d  09                	ADD	HL,BC
    84  005e  eb                	EX	DE,HL
    85  005f  ed4bdf00          	LD	BC,(OFFHI)
    86  0063  ed4a              	ADC	HL,BC
    87  0065  eb                	EX	DE,HL
    88  0066  c1                	POP	BC
    89  0067  c9                	RET
    90                          ;
    91                          ;PTIME	- Load elapsed-time clock.
    92                          ;   	  Inputs: DEHL = time to load (centiseconds)
    93                          ; 	  Destroys: A,D,E,H,L,F
    94                          ;
    95  0068  c5                PTIME:	PUSH	BC
    96  0069  d5                	PUSH	DE
    97  006a  e5                	PUSH	HL
    98  006b  cd8100            	CALL	TICKS
    99  006e  44                	LD	B,H
   100  006f  4d                	LD	C,L
   101  0070  e1                	POP	HL
   102  0071  b7                	OR	A
   103  0072  ed42              	SBC	HL,BC
   104  0074  22dd00            	LD	(OFFLO),HL
   105  0077  42                	LD	B,D
   106  0078  4b                	LD	C,E
   107  0079  e1                	POP	HL
   108  007a  ed42              	SBC	HL,BC
   109  007c  22df00            	LD	(OFFHI),HL
   110  007f  c1                	POP	BC
   111  0080  c9                	RET
   112                          ;
   113                          ; Get OS elapsed-time clock
   114                          ;  Outputs: DEHL = time (centiseconds)
   115                          ; Destroys: A,B,C,D,E,H,L,F
   116                          ;
   117  0081  0ef8              TICKS:	LD	C,248		;RunCPM-specific function call
   118  0083  cd1800            	CALL	BDOS
   119  0086  d5                	PUSH	DE
   120  0087  eb                	EX	DE,HL
   121  0088  b7                	OR	A
   122  0089  ed62              	SBC	HL,HL
   123  008b  01fbff            	LD	BC,-5
   124  008e  3e20              	LD	A,32
   125  0090  09                DIV0:	ADD	HL,BC
   126  0091  3802              	JR	C,DIV1
   127  0093  ed42              	SBC	HL,BC
   128  0095  cb13              DIV1:	RL	E
   129  0097  cb12              	RL	D
   130  0099  e3                	EX	(SP),HL
   131  009a  cb15              	RL	L
   132  009c  cb14              	RL	H
   133  009e  e3                	EX	(SP),HL
   134  009f  ed6a              	ADC	HL,HL
   135  00a1  3d                	DEC	A
   136  00a2  20ec              	JR	NZ,DIV0
   137  00a4  eb                	EX	DE,HL
   138  00a5  d1                	POP	DE
   139  00a6  c9                	RET
   140                          ;
   141                          ;INKEY	- Sample keyboard with specified wait.
   142                          ;   	  Inputs: HL = Time to wait (centiseconds)
   143                          ;  	  Outputs: Carry reset indicates time-out.
   144                          ;                  If carry set, A = character typed.
   145                          ; 	  Destroys: A,D,E,H,L,F
   146                          ;
   147  00a7  c5                INKEY:	PUSH	BC
   148  00a8  e5                	PUSH	HL
   149  00a9  cd8100            	CALL	TICKS
   150  00ac  d1                	POP	DE
   151  00ad  19                	ADD	HL,DE
   152  00ae  e5                WAIT:	PUSH	HL
   153  00af  0e06              	LD	C,6
   154  00b1  1eff              	LD	E,0FFH
   155  00b3  cd1800            	CALL	BDOS
   156  00b6  e1                	POP	HL
   157  00b7  b7                	OR	A
   158  00b8  37                	SCF
   159  00b9  200a              	JR	NZ,INKEY1
   160  00bb  e5                	PUSH	HL
   161  00bc  cd8100            	CALL	TICKS
   162  00bf  d1                	POP	DE
   163  00c0  ed52              	SBC	HL,DE
   164  00c2  eb                	EX	DE,HL
   165  00c3  38e9              	JR	C,WAIT
   166  00c5  c1                INKEY1:	POP	BC
   167  00c6  c9                	RET
   168                          ;
   169                          ;CLS	- Clear screen.
   170                          ;	  (Customise to suit your VDU)
   171                          ; 	  Destroys: A,D,E,H,L,F
   172                          ;
   173  00c7  c9                CLS:	RET
   174                          ;
   175                          ;PCSR	- Move cursor to specified position.
   176                          ;   	  Inputs: DE = horizontal position (LHS=0)
   177                          ;                 HL = vertical position (TOP=0)
   178                          ; 	  Destroys: A,D,E,H,L,F
   179                          ;
   180  00c8  c9                PCSR:	RET
   181                          ;
   182                          ;GCSR	- Return cursor coordinates.
   183                          ;   	  Outputs:  DE = X coordinate (POS)
   184                          ;                   HL = Y coordinate (VPOS)
   185                          ;  	  Destroys: A,D,E,H,L,F
   186                          ;
   187  00c9  110000            GCSR:	LD	DE,0
   188  00cc  210000            	LD	HL,0
   189  00cf  c9                	RET
   190                          ;
   191                          ;COUT - Output a character to the console
   192                          ;   Inputs: A = character
   193                          ; Destroys: A,F
   194                          ;
   195  00d0  c5                COUT:	PUSH	BC
   196  00d1  d5                	PUSH	DE
   197  00d2  e5                	PUSH	HL
   198  00d3  5f                	LD	E,A
   199  00d4  0e02              	LD	C,2
   200  00d6  cd1800            	CALL	BDOS
   201  00d9  e1                	POP	HL
   202  00da  d1                	POP	DE
   203  00db  c1                	POP	BC
   204  00dc  c9                	RET
   205                          ;
   206                          ;	DEFS 0$ > 1F0h
   207                          ;    ; Código a ensamblar si la dirección actual es mayor que 1F0h
   208                          ;	ERROR	"INSUFFICIENT SPACE"
   209                          ;	ENDIF
   210                          
   211                          ;
   212                          ;	ORG	1F0H
   213                          ;
   214  00dd  0000              OFFLO:	DEFW	0		;TIME OFFSET LO
   215  00df  0000              OFFHI:	DEFW	0		;TIME OFFSET HI
   216  00e1  50                	DEFB	80		;WIDTH
   217  00e2  07                	DEFB	'G' & 1FH	;CURSOR UP
   218  00e3  0f                	DEFB	'O' & 1FH	;CURSOR DOWN
   219  00e4  06                	DEFB	'F' & 1FH	;START OF LINE
   220  00e5  0e                	DEFB	'N' & 1FH	;END OF LINE
   221  00e6  18                	DEFB	'X' & 1FH	;DELETE TO END OF LINE
   222  00e7  08                	DEFB	08H		;BACKSPACE & DELETE
   223  00e8  15                	DEFB	'U' & 1FH	;DEL TO START OF LINE
   224  00e9  0a                	DEFB	'J' & 1FH	;CURSOR LEFT
   225  00ea  0c                	DEFB	'L' & 1FH	;CURSOR RIGHT
   226  00eb  12                	DEFB	'R' & 1FH	;DELETE CHARACTER
   227  00ec  11                	DEFB	'Q' & 1FH	;INS/OVR TOGGLE
   228                          ;
   229                          FIN:	DEFS 	0
   230                          
